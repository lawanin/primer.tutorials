TO-DO Items for Tutorials


Nosa:

Fix typos and mistakes as students point them out. Write comments/notes about larger things to fix later.

Today: Fix all wrangling tutorials.

Tomorrow: First example is daily mean (or whatever) temperature data. Use 5 cites including San Diego and Anchorage and Boston. Plot is geom_jitter() with temperature on y-axis and cities on x-axis. 365 points for each city. 20 or fewer questions. Most independent of each other.

Becca:

* write_csv(), write_rds() and read_rds() in Data A. Tell students to run list.files() and then paste the result so that we know they made the file. After you read_rds() it back in, you can have them run ls() and paste the results.  And some col_types stuff. Using other arguments. Like max and min stuff.

* Read Chapter 3. Make any changes you like. Read Data Import chapter in R4DS. Think about where/how we teach that stuff.


Tutorials to Add

* Need a tutorial which teaches about R Markdown and R Projects. Or maybe just links to an on-line tutorial which does that? 

* Expand the Git and Github tutorial. Need to keep this connected to the relevant section in Tools. How much material might we add?

* An Rpubs tutorial?

* A "census" tutorial which covers all the relevant material in the maps tutorial, but no mapping.

* A "map" tutorial which starts by assuming the existence of the needed map data and then does the same map plots as in the appendix.

* A tutorial which does the same webscraping as the Mine/Mine paper. Note that that paper is CC, so we can just copy/paste the relevant sections. Add this material first as a section in Chapter 3. Then write a tutorial which hits the highlights.

* Is it possible to create a "distill" tutorial? What would that look like? Probably not. But then how about a distill class exercise?


To Discuss:

* Add ggdist and stat_slab to chapter 1 and Visualization tutorials.

* "Submit" section is poorly named since we don't really submit anything. Ought to be named "Download answers" or something like that.

* How do we test just one tutorial.Rmd. Using "Run Document"", although it willl catch some problems, does not catch everything. Using "Check" works, but it takes forever because we have too many tutorials. There must be something we can do from the Console. But this might be tricky! Don't forget the (important?) distinction between raw .Rmd files and installed tutorials.

* Expand the Getting Started tutorial and make it better connected to the Primer chapter. Students read the chapter and then do the tutorial. The tutorial ought to confirm that they have done everything that the chapter told them to do. Even though it is done in class, it could be a bit longer, so 10 or 15 questions.

* Do we really still need to be using the development version of learnr? That makes me nervous! And why haven't they updated the version on CRAN for more than 15 months?

* Document the fact that, although we don't have "solutions"" for tutorials, we can use, for example, knitr::purl("inst/tutorials/000-getting-started/tutorial.Rmd") to make a tutorial.R file which includes all the R code used for the answers. Maybe that trick is enough, even though it is hard to use since the questions themselves are not provided? 95%+ of students won't care.

* Can we use knitr::purl() to create .R files which might then become part of our testing process?

* Process all rds files and organize the results.



When I have a link in a tutorial, and the student clicks on it, there seems to be no way to get back to the tutorial. There is no "Go Back" button. How can we fix this? Ask on RStudio Community.


What is up with this note?

* checking dependencies in R code ... NOTE
Namespaces in Imports field not imported from:
  ‘grid’ ‘png’ ‘primer.data’ ‘readxl’ ‘rstanarm’ ‘tidyverse’
  All declared Imports should be used.




Plots in visualization-D with vertical lines for 2* mad .

Get .Rbuildignore to ignore any non-Rmd file in inst/tutorials. Otherwise, the tutorial folder gets too big with all the junk files.


* What to do with PDF and tinytex? This all seemed to work very easily. Maybe just install and then issue packageVersion("tinytex")?

* mention iter = 10000

* Revisit making tables nice.


## Items to add to our testing process

* If you don't have an r at the start of the r code chunk options, the entire tutorial breaks and, at least sometimes, it breaks by creating the tutorial but with only questions and with three columns. Could we have a test that checks for this? Test that each code chunk options in a tutorial begins with r followed by a space.

* We want the test to fail if there is a package like broom.mixed which is used in a tutorial but which is not in the DESCRIPTION file. **renv** might have a way to get a list of all the words which appear in any library() call within the package . . .

* Have our testing process check that all hints have eval = FALSE.

* Test for exercise chunks with no lines. This causes a weird error which is very hard to diagnose.

* Automate a test of the Submit button. Want to actually download the rds and check that it is "correct."

* Should we have the default download be a PDF file? Big benefit (?) is that it is easier for students to see what they have done all at once. Also easier (?) for TFs to grade quickly. But also easier to cheat? Also, harder to automate the processing of them. Best would be to add an option so that students can choose either rds or PDF.

To Explore:

* Consider this framework: https://github.com/noamross/gams-in-r-course

* Should our tutorials look more like this one?

https://minecr.shinyapps.io/dsbox-05-moneyinpolitics/

* Explore the use of setup chunks that are referenced by name, rather than requiring that the code chunk names match up. Example: exercise.setup = "setupA"

* Put the number of exercises in the group header so that students know how long? Or maybe put in in the exercise header in exercise 5, 10 and so on.

* Can we give students a search box in the tutorial so that they can find answers to questions they have already done?

* There is a lot of redundent text in tutorials: Write your name, submit, et cetera. Any way to avoid copying/pasting that each time? Maybe we need a "make tutorial" script which would take a raw tutorial and then add that material to it. Perhaps a template? But then we can't (?) go back and make a change in our other 20 tutorials. Maybe we need a script which finds the current version of these standard sections, deletes them, and then replaces them with the official version?



* Interesting discussion and some plausible claims: http://laderast.github.io/2020/09/15/getting-learnr-tutorials-to-run-on-mybinder-org/. Claims that "the .Rmd file containing the tutorial should be named the same as the directory it is in." But why?


* https://github.com/karthik/holepunch is interesting. But it also hasn't been updated in more than 7 months.


